'use strict'; module.exports = validate10; module.exports.default = validate10; const schema11 = { type: 'object', properties: { url: { oneOf: [{ type: 'string' }, { type: 'object', properties: { protocol: { type: 'string' }, hostname: { type: 'string' }, pathname: { type: 'string' } }, additionalProperties: true, required: ['pathname'] }] }, path: { oneOf: [{ type: 'string' }, { type: 'object', properties: { protocol: { type: 'string' }, hostname: { type: 'string' }, pathname: { type: 'string' } }, additionalProperties: true, required: ['pathname'] }] }, cookies: { type: 'object', additionalProperties: true }, headers: { type: 'object', additionalProperties: true }, query: { type: 'object', additionalProperties: true }, simulate: { type: 'object', properties: { end: { type: 'boolean' }, split: { type: 'boolean' }, error: { type: 'boolean' }, close: { type: 'boolean' } } }, authority: { type: 'string' }, remoteAddress: { type: 'string' }, method: { type: 'string', enum: ['ACL', 'BIND', 'CHECKOUT', 'CONNECT', 'COPY', 'DELETE', 'GET', 'HEAD', 'LINK', 'LOCK', 'M-SEARCH', 'MERGE', 'MKACTIVITY', 'MKCALENDAR', 'MKCOL', 'MOVE', 'NOTIFY', 'OPTIONS', 'PATCH', 'POST', 'PRI', 'PROPFIND', 'PROPPATCH', 'PURGE', 'PUT', 'REBIND', 'REPORT', 'SEARCH', 'SOURCE', 'SUBSCRIBE', 'TRACE', 'UNBIND', 'UNLINK', 'UNLOCK', 'UNSUBSCRIBE', 'acl', 'bind', 'checkout', 'connect', 'copy', 'delete', 'get', 'head', 'link', 'lock', 'm-search', 'merge', 'mkactivity', 'mkcalendar', 'mkcol', 'move', 'notify', 'options', 'patch', 'post', 'pri', 'propfind', 'proppatch', 'purge', 'put', 'rebind', 'report', 'search', 'source', 'subscribe', 'trace', 'unbind', 'unlink', 'unlock', 'unsubscribe'] }, validate: { type: 'boolean' } }, additionalProperties: true, oneOf: [{ required: ['url'] }, { required: ['path'] }] }; const func0 = require('ajv/dist/compile/equal'); function validate10 (data, { dataPath = '', parentData, parentDataProperty, rootData = data } = {}) { let vErrors = null; let errors = 0; const _errs0 = errors; let valid0 = false; let passing0 = null; const _errs1 = errors; if (data && typeof data === 'object' && !Array.isArray(data)) { let missing0; if (data.url === undefined && (missing0 = 'url')) { const err0 = { keyword: 'required', dataPath, schemaPath: '#/oneOf/0/required', params: { missingProperty: missing0 }, message: "should have required property '" + missing0 + "'" }; if (vErrors === null) { vErrors = [err0] } else { vErrors.push(err0) }errors++ } } var _valid0 = _errs1 === errors; if (_valid0) { valid0 = true; passing0 = 0 } const _errs2 = errors; if (data && typeof data === 'object' && !Array.isArray(data)) { let missing1; if (data.path === undefined && (missing1 = 'path')) { const err1 = { keyword: 'required', dataPath, schemaPath: '#/oneOf/1/required', params: { missingProperty: missing1 }, message: "should have required property '" + missing1 + "'" }; if (vErrors === null) { vErrors = [err1] } else { vErrors.push(err1) }errors++ } } var _valid0 = _errs2 === errors; if (_valid0 && valid0) { valid0 = false; passing0 = [passing0, 1] } else { if (_valid0) { valid0 = true; passing0 = 1 } } if (!valid0) { const err2 = { keyword: 'oneOf', dataPath, schemaPath: '#/oneOf', params: { passingSchemas: passing0 }, message: 'should match exactly one schema in oneOf' }; if (vErrors === null) { vErrors = [err2] } else { vErrors.push(err2) }errors++; validate10.errors = vErrors; return false } else { errors = _errs0; if (vErrors !== null) { if (_errs0) { vErrors.length = _errs0 } else { vErrors = null } } } if (errors === 0) { if (data && typeof data === 'object' && !Array.isArray(data)) { if (data.url !== undefined) { const data0 = data.url; const _errs4 = errors; const _errs5 = errors; let valid2 = false; let passing1 = null; const _errs6 = errors; if (typeof data0 !== 'string') { const err3 = { keyword: 'type', dataPath: dataPath + '/url', schemaPath: '#/properties/url/oneOf/0/type', params: { type: 'string' }, message: 'should be string' }; if (vErrors === null) { vErrors = [err3] } else { vErrors.push(err3) }errors++ } var _valid1 = _errs6 === errors; if (_valid1) { valid2 = true; passing1 = 0 } const _errs7 = errors; if (data0 && typeof data0 === 'object' && !Array.isArray(data0)) { let missing2; if (data0.pathname === undefined && (missing2 = 'pathname')) { const err4 = { keyword: 'required', dataPath: dataPath + '/url', schemaPath: '#/properties/url/oneOf/1/required', params: { missingProperty: missing2 }, message: "should have required property '" + missing2 + "'" }; if (vErrors === null) { vErrors = [err4] } else { vErrors.push(err4) }errors++ } else { if (data0.protocol !== undefined) { const _errs9 = errors; if (typeof data0.protocol !== 'string') { const err5 = { keyword: 'type', dataPath: dataPath + '/url/protocol', schemaPath: '#/properties/url/oneOf/1/properties/protocol/type', params: { type: 'string' }, message: 'should be string' }; if (vErrors === null) { vErrors = [err5] } else { vErrors.push(err5) }errors++ } var valid3 = _errs9 === errors } else { var valid3 = true } if (valid3) { if (data0.hostname !== undefined) { const _errs10 = errors; if (typeof data0.hostname !== 'string') { const err6 = { keyword: 'type', dataPath: dataPath + '/url/hostname', schemaPath: '#/properties/url/oneOf/1/properties/hostname/type', params: { type: 'string' }, message: 'should be string' }; if (vErrors === null) { vErrors = [err6] } else { vErrors.push(err6) }errors++ } var valid3 = _errs10 === errors } else { var valid3 = true } if (valid3) { if (data0.pathname !== undefined) { const _errs11 = errors; if (typeof data0.pathname !== 'string') { const err7 = { keyword: 'type', dataPath: dataPath + '/url/pathname', schemaPath: '#/properties/url/oneOf/1/properties/pathname/type', params: { type: 'string' }, message: 'should be string' }; if (vErrors === null) { vErrors = [err7] } else { vErrors.push(err7) }errors++ } var valid3 = _errs11 === errors } else { var valid3 = true } } } } } else { const err8 = { keyword: 'type', dataPath: dataPath + '/url', schemaPath: '#/properties/url/oneOf/1/type', params: { type: 'object' }, message: 'should be object' }; if (vErrors === null) { vErrors = [err8] } else { vErrors.push(err8) }errors++ } var _valid1 = _errs7 === errors; if (_valid1 && valid2) { valid2 = false; passing1 = [passing1, 1] } else { if (_valid1) { valid2 = true; passing1 = 1 } } if (!valid2) { const err9 = { keyword: 'oneOf', dataPath: dataPath + '/url', schemaPath: '#/properties/url/oneOf', params: { passingSchemas: passing1 }, message: 'should match exactly one schema in oneOf' }; if (vErrors === null) { vErrors = [err9] } else { vErrors.push(err9) }errors++; validate10.errors = vErrors; return false } else { errors = _errs5; if (vErrors !== null) { if (_errs5) { vErrors.length = _errs5 } else { vErrors = null } } } var valid1 = _errs4 === errors } else { var valid1 = true } if (valid1) { if (data.path !== undefined) { const data4 = data.path; const _errs12 = errors; const _errs13 = errors; let valid4 = false; let passing2 = null; const _errs14 = errors; if (typeof data4 !== 'string') { const err10 = { keyword: 'type', dataPath: dataPath + '/path', schemaPath: '#/properties/path/oneOf/0/type', params: { type: 'string' }, message: 'should be string' }; if (vErrors === null) { vErrors = [err10] } else { vErrors.push(err10) }errors++ } var _valid2 = _errs14 === errors; if (_valid2) { valid4 = true; passing2 = 0 } const _errs15 = errors; if (data4 && typeof data4 === 'object' && !Array.isArray(data4)) { let missing3; if (data4.pathname === undefined && (missing3 = 'pathname')) { const err11 = { keyword: 'required', dataPath: dataPath + '/path', schemaPath: '#/properties/path/oneOf/1/required', params: { missingProperty: missing3 }, message: "should have required property '" + missing3 + "'" }; if (vErrors === null) { vErrors = [err11] } else { vErrors.push(err11) }errors++ } else { if (data4.protocol !== undefined) { const _errs17 = errors; if (typeof data4.protocol !== 'string') { const err12 = { keyword: 'type', dataPath: dataPath + '/path/protocol', schemaPath: '#/properties/path/oneOf/1/properties/protocol/type', params: { type: 'string' }, message: 'should be string' }; if (vErrors === null) { vErrors = [err12] } else { vErrors.push(err12) }errors++ } var valid5 = _errs17 === errors } else { var valid5 = true } if (valid5) { if (data4.hostname !== undefined) { const _errs18 = errors; if (typeof data4.hostname !== 'string') { const err13 = { keyword: 'type', dataPath: dataPath + '/path/hostname', schemaPath: '#/properties/path/oneOf/1/properties/hostname/type', params: { type: 'string' }, message: 'should be string' }; if (vErrors === null) { vErrors = [err13] } else { vErrors.push(err13) }errors++ } var valid5 = _errs18 === errors } else { var valid5 = true } if (valid5) { if (data4.pathname !== undefined) { const _errs19 = errors; if (typeof data4.pathname !== 'string') { const err14 = { keyword: 'type', dataPath: dataPath + '/path/pathname', schemaPath: '#/properties/path/oneOf/1/properties/pathname/type', params: { type: 'string' }, message: 'should be string' }; if (vErrors === null) { vErrors = [err14] } else { vErrors.push(err14) }errors++ } var valid5 = _errs19 === errors } else { var valid5 = true } } } } } else { const err15 = { keyword: 'type', dataPath: dataPath + '/path', schemaPath: '#/properties/path/oneOf/1/type', params: { type: 'object' }, message: 'should be object' }; if (vErrors === null) { vErrors = [err15] } else { vErrors.push(err15) }errors++ } var _valid2 = _errs15 === errors; if (_valid2 && valid4) { valid4 = false; passing2 = [passing2, 1] } else { if (_valid2) { valid4 = true; passing2 = 1 } } if (!valid4) { const err16 = { keyword: 'oneOf', dataPath: dataPath + '/path', schemaPath: '#/properties/path/oneOf', params: { passingSchemas: passing2 }, message: 'should match exactly one schema in oneOf' }; if (vErrors === null) { vErrors = [err16] } else { vErrors.push(err16) }errors++; validate10.errors = vErrors; return false } else { errors = _errs13; if (vErrors !== null) { if (_errs13) { vErrors.length = _errs13 } else { vErrors = null } } } var valid1 = _errs12 === errors } else { var valid1 = true } if (valid1) { if (data.cookies !== undefined) { const data8 = data.cookies; const _errs20 = errors; if (data8 && typeof data8 === 'object' && !Array.isArray(data8)) {} else { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/cookies', schemaPath: '#/properties/cookies/type', params: { type: 'object' }, message: 'should be object' }]; return false } var valid1 = _errs20 === errors } else { var valid1 = true } if (valid1) { if (data.headers !== undefined) { const data9 = data.headers; const _errs22 = errors; if (data9 && typeof data9 === 'object' && !Array.isArray(data9)) {} else { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/headers', schemaPath: '#/properties/headers/type', params: { type: 'object' }, message: 'should be object' }]; return false } var valid1 = _errs22 === errors } else { var valid1 = true } if (valid1) { if (data.query !== undefined) { const data10 = data.query; const _errs24 = errors; if (data10 && typeof data10 === 'object' && !Array.isArray(data10)) {} else { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/query', schemaPath: '#/properties/query/type', params: { type: 'object' }, message: 'should be object' }]; return false } var valid1 = _errs24 === errors } else { var valid1 = true } if (valid1) { if (data.simulate !== undefined) { const data11 = data.simulate; const _errs26 = errors; if (data11 && typeof data11 === 'object' && !Array.isArray(data11)) { if (data11.end !== undefined) { const _errs27 = errors; if (typeof data11.end !== 'boolean') { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/simulate/end', schemaPath: '#/properties/simulate/properties/end/type', params: { type: 'boolean' }, message: 'should be boolean' }]; return false } var valid6 = _errs27 === errors } else { var valid6 = true } if (valid6) { if (data11.split !== undefined) { const _errs28 = errors; if (typeof data11.split !== 'boolean') { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/simulate/split', schemaPath: '#/properties/simulate/properties/split/type', params: { type: 'boolean' }, message: 'should be boolean' }]; return false } var valid6 = _errs28 === errors } else { var valid6 = true } if (valid6) { if (data11.error !== undefined) { const _errs29 = errors; if (typeof data11.error !== 'boolean') { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/simulate/error', schemaPath: '#/properties/simulate/properties/error/type', params: { type: 'boolean' }, message: 'should be boolean' }]; return false } var valid6 = _errs29 === errors } else { var valid6 = true } if (valid6) { if (data11.close !== undefined) { const _errs30 = errors; if (typeof data11.close !== 'boolean') { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/simulate/close', schemaPath: '#/properties/simulate/properties/close/type', params: { type: 'boolean' }, message: 'should be boolean' }]; return false } var valid6 = _errs30 === errors } else { var valid6 = true } } } } } else { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/simulate', schemaPath: '#/properties/simulate/type', params: { type: 'object' }, message: 'should be object' }]; return false } var valid1 = _errs26 === errors } else { var valid1 = true } if (valid1) { if (data.authority !== undefined) { const _errs31 = errors; if (typeof data.authority !== 'string') { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/authority', schemaPath: '#/properties/authority/type', params: { type: 'string' }, message: 'should be string' }]; return false } var valid1 = _errs31 === errors } else { var valid1 = true } if (valid1) { if (data.remoteAddress !== undefined) { const _errs32 = errors; if (typeof data.remoteAddress !== 'string') { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/remoteAddress', schemaPath: '#/properties/remoteAddress/type', params: { type: 'string' }, message: 'should be string' }]; return false } var valid1 = _errs32 === errors } else { var valid1 = true } if (valid1) { if (data.method !== undefined) { const data18 = data.method; const _errs33 = errors; if (typeof data18 !== 'string') { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/method', schemaPath: '#/properties/method/type', params: { type: 'string' }, message: 'should be string' }]; return false } if (!((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((data18 === 'ACL') || (data18 === 'BIND')) || (data18 === 'CHECKOUT')) || (data18 === 'CONNECT')) || (data18 === 'COPY')) || (data18 === 'DELETE')) || (data18 === 'GET')) || (data18 === 'HEAD')) || (data18 === 'LINK')) || (data18 === 'LOCK')) || (data18 === 'M-SEARCH')) || (data18 === 'MERGE')) || (data18 === 'MKACTIVITY')) || (data18 === 'MKCALENDAR')) || (data18 === 'MKCOL')) || (data18 === 'MOVE')) || (data18 === 'NOTIFY')) || (data18 === 'OPTIONS')) || (data18 === 'PATCH')) || (data18 === 'POST')) || (data18 === 'PRI')) || (data18 === 'PROPFIND')) || (data18 === 'PROPPATCH')) || (data18 === 'PURGE')) || (data18 === 'PUT')) || (data18 === 'REBIND')) || (data18 === 'REPORT')) || (data18 === 'SEARCH')) || (data18 === 'SOURCE')) || (data18 === 'SUBSCRIBE')) || (data18 === 'TRACE')) || (data18 === 'UNBIND')) || (data18 === 'UNLINK')) || (data18 === 'UNLOCK')) || (data18 === 'UNSUBSCRIBE')) || (data18 === 'acl')) || (data18 === 'bind')) || (data18 === 'checkout')) || (data18 === 'connect')) || (data18 === 'copy')) || (data18 === 'delete')) || (data18 === 'get')) || (data18 === 'head')) || (data18 === 'link')) || (data18 === 'lock')) || (data18 === 'm-search')) || (data18 === 'merge')) || (data18 === 'mkactivity')) || (data18 === 'mkcalendar')) || (data18 === 'mkcol')) || (data18 === 'move')) || (data18 === 'notify')) || (data18 === 'options')) || (data18 === 'patch')) || (data18 === 'post')) || (data18 === 'pri')) || (data18 === 'propfind')) || (data18 === 'proppatch')) || (data18 === 'purge')) || (data18 === 'put')) || (data18 === 'rebind')) || (data18 === 'report')) || (data18 === 'search')) || (data18 === 'source')) || (data18 === 'subscribe')) || (data18 === 'trace')) || (data18 === 'unbind')) || (data18 === 'unlink')) || (data18 === 'unlock')) || (data18 === 'unsubscribe'))) { validate10.errors = [{ keyword: 'enum', dataPath: dataPath + '/method', schemaPath: '#/properties/method/enum', params: { allowedValues: schema11.properties.method.enum }, message: 'should be equal to one of the allowed values' }]; return false } var valid1 = _errs33 === errors } else { var valid1 = true } if (valid1) { if (data.validate !== undefined) { const _errs34 = errors; if (typeof data.validate !== 'boolean') { validate10.errors = [{ keyword: 'type', dataPath: dataPath + '/validate', schemaPath: '#/properties/validate/type', params: { type: 'boolean' }, message: 'should be boolean' }]; return false } var valid1 = _errs34 === errors } else { var valid1 = true } } } } } } } } } } } else { validate10.errors = [{ keyword: 'type', dataPath, schemaPath: '#/type', params: { type: 'object' }, message: 'should be object' }]; return false } }validate10.errors = vErrors; return errors === 0 }
